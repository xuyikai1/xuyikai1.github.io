<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>浅谈Redis客户端Redisson</title>
      <link href="/posts/redisson.html"/>
      <url>/posts/redisson.html</url>
      
        <content type="html"><![CDATA[<h1 id="Redisson"><a href="#Redisson" class="headerlink" title="Redisson"></a>Redisson</h1><h2 id="1-分布式锁"><a href="#1-分布式锁" class="headerlink" title="1.分布式锁"></a>1.分布式锁</h2><h3 id="1-单应用使用锁"><a href="#1-单应用使用锁" class="headerlink" title="(1) 单应用使用锁"></a>(1) 单应用使用锁</h3><p><strong>说明</strong>：使用 Java 的 <strong>Synchronized</strong> 或者 <strong>ReentrantLock</strong> 关键字加锁</p><p><strong>缺点</strong>：当用户扩大并发飙升时，单应用扛不住流量出现宕机从而影响整个项目，如果选择用多加机器的方式来解决，此加锁方式无法解决超卖等问题（库存为1，两个应用分别从两台服务器中请求进来）</p><blockquote><p>各个服务器加的锁只对属于自己 JVM 里面的线程有效，对于其他 JVM 的线程是无效的,所以只适合并发量不大的单应用场景</p></blockquote><h3 id="2-分布式锁"><a href="#2-分布式锁" class="headerlink" title="(2) 分布式锁"></a>(2) 分布式锁</h3><blockquote><p>原理：为整个集群或者系统中提供一个全局唯一能获取锁的应用（redis、ZK等），不同服务器在同一业务场景下获取的锁保证为同一个锁</p></blockquote><h4 id="传统redis分布式锁"><a href="#传统redis分布式锁" class="headerlink" title="传统redis分布式锁"></a>传统redis分布式锁</h4><p><strong>获取锁</strong>： Redis SETNX命令(后期redis版本使用set命令同步设置过期时间即可)</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 获取锁 </span><span class="token comment" spellcheck="true">// NX是指如果key不存在就成功，key存在返回false，PX可以指定过期时间 </span>SET anyLock unique_value NX PX <span class="token number">30000</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>释放锁</strong>：通过执行一段lua脚本</p><pre class="line-numbers language-java"><code class="language-java"><span class="token number">1</span><span class="token punctuation">.</span>释放锁涉及到两条指令，这两条指令不是原子性的 <span class="token number">2</span><span class="token punctuation">.</span>需要用到redis的lua脚本支持特性，redis执行lua脚本是原子性的 Lua脚本代码：<span class="token keyword">if</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">,</span>KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> ARGV<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> then    <span class="token keyword">return</span> redis<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"del"</span><span class="token punctuation">,</span>KEYS<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">else</span>    <span class="token keyword">return</span> <span class="token number">0</span>end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>关键点</strong>：<br>1.必须使用set命令（附上NX），单独使用set和设置过期时间不为原子操作<br>2.set命令（附上NX）设置的value必须具有唯一性，例如随机字符串（防止A获取锁因为时间超时导致锁释放后B获取锁，A再释放B刚获取到的锁的问题）</p></blockquote><h4 id="redis部署方式弊端"><a href="#redis部署方式弊端" class="headerlink" title="redis部署方式弊端"></a>redis部署方式弊端</h4><ul><li><strong>单机模式</strong>：当这台redis宕机之后就无法提供加锁导致业务血崩</li><li><strong>主从/集群模式</strong>：当master节点宕机，哨兵sentinel选举后发生主从切换时，原先的从节点可能丢失锁</li></ul><h4 id="红锁RedLock"><a href="#红锁RedLock" class="headerlink" title="红锁RedLock"></a>红锁RedLock</h4><blockquote><p>无法保证加锁的过程一定正确 </p></blockquote><h3 id="Redisson分布式锁"><a href="#Redisson分布式锁" class="headerlink" title="Redisson分布式锁"></a>Redisson分布式锁</h3><h4 id="传统redis分布式锁的弊端"><a href="#传统redis分布式锁的弊端" class="headerlink" title="传统redis分布式锁的弊端"></a>传统redis分布式锁的弊端</h4><blockquote><p>  使用setnx命令设置超时时间为30s，但是当30s过后业务A未执行完但是另外一个线程/请求B已进来也获取到该锁，而后业务A执行结束释放锁，就会出现超卖等线程安全问题；<br>PS：所以需要人为根据业务来维护这个超时时间</p></blockquote><h4 id="redisson优点"><a href="#redisson优点" class="headerlink" title="redisson优点"></a>redisson优点</h4><h5 id="1-传统分布式锁弊端解决-watchDog看门狗"><a href="#1-传统分布式锁弊端解决-watchDog看门狗" class="headerlink" title="1.传统分布式锁弊端解决 - watchDog看门狗"></a>1.传统分布式锁弊端解决 - watchDog看门狗</h5><p>  看门狗作用：监控锁</p><blockquote><p>1：当获取锁没有设置key超时时间时，会设置默认超时时间为30s，之后看门狗会每隔10s把key的超时时间延长至30s，保证锁一直被当前线程占用直至业务结束释放锁<br>2：Redisson 的“看门狗”逻辑保证了没有死锁发生。(如果机器宕机了，看门狗也就没了。此时就不会延长 Key 的过期时间，到了 30s 之后就会自动过期了，其他线程可以获取到锁)<br>3：当设置了key超时时间时，则超时key会自动释放<br>4：个人思考：加锁是加在了当前redis实例中，当实例redis宕机时，看门狗消失就不会延长时间而自动过期（当为redis主从集群例如三主三从时，每个key根据算法（相关：只分配给master的槽节点）分配到对应redis中）</p></blockquote><h5 id="2-使用简单"><a href="#2-使用简单" class="headerlink" title="2.使用简单"></a>2.使用简单</h5><pre class="line-numbers language-java"><code class="language-java">Config config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> config<span class="token punctuation">.</span><span class="token function">useSingleServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addNodeAddress</span><span class="token punctuation">(</span><span class="token string">"redis://192.168.31.101:7001"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDatabase</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> RedissonClient redissonClient <span class="token operator">=</span> Redisson<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span> RLock lock <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span><span class="token string">"anyLock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>1：Redisson 所有指令都通过 Lua 脚本执行，Redis 支持 Lua 脚本原子性执行。</p></blockquote><h2 id="2-发布订阅实现配置缓存相关操作"><a href="#2-发布订阅实现配置缓存相关操作" class="headerlink" title="2.发布订阅实现配置缓存相关操作"></a>2.发布订阅实现配置缓存相关操作</h2><p><strong>说明</strong>：redisson简单的api + springboot CommandLineRunner实现启动时执行配置初始化和发布订阅的功能，当redis客户端发布命令时，进行相应的操作</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> CommandLineRunner <span class="token function">init</span><span class="token punctuation">(</span>ApplicationContext ctx<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> args <span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// RedissonClient在config中已配置</span>        RedissonClient redissonClient <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>RedissonClient<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SysTenantServiceImpl sysTenantService <span class="token operator">=</span> ctx<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>SysTenantServiceImpl<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 初始化配置</span>        sysTenantService<span class="token punctuation">.</span><span class="token function">initSysTenant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// redis发布订阅</span>        RTopic<span class="token operator">&lt;</span>String<span class="token operator">></span> topic <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span>KEY<span class="token punctuation">,</span> StringCodec<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 添加监听器</span>        topic<span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> message<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            JSONObject msg <span class="token operator">=</span> JSONUtil<span class="token punctuation">.</span><span class="token function">parseObj</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"DEL"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>MapUtil<span class="token punctuation">.</span><span class="token function">getStr</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token string">"action"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sysTenantService<span class="token punctuation">.</span><span class="token function">removeByOrgId</span><span class="token punctuation">(</span>MapUtil<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token string">"Id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"ALL"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>MapUtil<span class="token punctuation">.</span><span class="token function">getStr</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token string">"action"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sysTenantService<span class="token punctuation">.</span><span class="token function">initSysTenant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"UPDATE"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>MapUtil<span class="token punctuation">.</span><span class="token function">getStr</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token string">"action"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                sysTenantService<span class="token punctuation">.</span><span class="token function">updateByOrgId</span><span class="token punctuation">(</span>MapUtil<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token string">"Id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"TOPIC-BILL-BOOK-CONFIG-REFRESH Listener创建成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span>redis 客户端命令例子：<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> publish KEY <span class="token string">"{\"action\":\"ALL\"}"</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> publish KEY <span class="token string">"{\"action"</span><span class="token operator">:</span>\<span class="token string">"DEL\", \"Id\":\"1\"}"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-布隆过滤器-bloomfilter"><a href="#3-布隆过滤器-bloomfilter" class="headerlink" title="3.布隆过滤器 - bloomfilter"></a>3.布隆过滤器 - bloomfilter</h2><blockquote><p>PS：创建布隆过滤器需要根据业务场关注 <strong>期望插入值</strong> 和 <strong>判断失误的概率</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java"># <span class="token number">1</span><span class="token punctuation">.</span>从redis获取布隆过滤器RBloomFilter<span class="token operator">&lt;</span>String<span class="token operator">></span> filter <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getBloomFilter</span><span class="token punctuation">(</span><span class="token string">"testBloomFilter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span># <span class="token number">2</span><span class="token punctuation">.</span>不存在则初始化filter<span class="token punctuation">.</span><span class="token function">tryInit</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">;</span># <span class="token number">3</span><span class="token punctuation">.</span>新增<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">20</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    filter<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>StrUtil<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span># <span class="token number">4</span><span class="token punctuation">.</span>判断是否存在<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">20</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"key:{},是否存在：{}"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>filter<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>StrUtil<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-redis集群配置-redis-cluster"><a href="#4-redis集群配置-redis-cluster" class="headerlink" title="4.redis集群配置 - redis cluster"></a>4.redis集群配置 - redis cluster</h2><p>集群初始化配置</p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> nodes <span class="token operator">=</span> Lists<span class="token punctuation">.</span><span class="token function">newArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"redis://192.168.10.139:6379"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"redis://192.168.10.140:6379"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"redis://192.168.10.141:6379"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"redis://192.168.10.142:6379"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"redis://192.168.10.143:6379"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nodes<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"redis://192.168.10.144:6379"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> Convert<span class="token punctuation">.</span><span class="token function">toStrArray</span><span class="token punctuation">(</span>nodes<span class="token punctuation">)</span><span class="token punctuation">;</span>Config config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ClusterServersConfig clusterServersConfig <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">useClusterServers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>clusterServersConfig        <span class="token punctuation">.</span><span class="token function">setScanInterval</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 集群状态扫描间隔时间，单位是毫秒</span>        <span class="token punctuation">.</span><span class="token function">addNodeAddress</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>redissonClient <span class="token operator">=</span> Redisson<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>【参考链接】<br>1：<a href="https://zhuanlan.zhihu.com/p/73807097">分布式锁</a><br>2：<a href="https://zhuanlan.zhihu.com/p/78300382">Redis解析：SET复合命令和简易的分布式锁优化</a><br>3：<a href="http://www.redis.cn/commands/set.html">redis官方文档 – set 命令</a><br>4：<a href="https://github.com/redisson/redisson/wiki/%E7%9B%AE%E5%BD%95">redisson官方文档</a><br>5：<a href="https://github.com/Snailclimb/JavaGuide/blob/master/docs/dataStructures-algorithms/data-structure/bloom-filter.md">布隆过滤器</a><br>6：<a href="https://zhuanlan.zhihu.com/p/111354065">细说Redis分布式锁</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring 事件发布监听机制实现业务解耦</title>
      <link href="/posts/spring-event.html"/>
      <url>/posts/spring-event.html</url>
      
        <content type="html"><![CDATA[<h1 id="Spring事件发布监听机制实现业务解耦"><a href="#Spring事件发布监听机制实现业务解耦" class="headerlink" title="Spring事件发布监听机制实现业务解耦"></a>Spring事件发布监听机制实现业务解耦</h1><h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1.引言"></a>1.引言</h2><blockquote><p>假设一个下单场景，订单创建成功后可能有一些后续逻辑要处理，但是和创建订单本身没有关系，此时就可以在创建订单完成后，发送一个消息，有相应部分的代码进行监听处理，避免代码耦合到一起</p></blockquote><p>这样的解决思路类似于MQ，但是小项目有时候又不需要MQ这样的第三方队列来实现，那么就可以使用Spring Context包的<strong>事件发布监听的机制来进行处理</strong></p><h2 id="2-Spring事件发布监听机制"><a href="#2-Spring事件发布监听机制" class="headerlink" title="2.Spring事件发布监听机制"></a>2.Spring事件发布监听机制</h2><p><img src="/medias/loading/orange.square-circle-preloader.svg" data-original="https://cdn.jsdelivr.net/gh/xuyikai1/PictureBedCDN/img/1.png" alt="1.png"></p><p><strong>流程：</strong> 当事件源（发布者）发布事件时，相应监听此事件的监听者接收到事件对象并且进行处理</p><p>Spring的事件发布监听机制本质上就是<strong>发布-订阅</strong>，即<strong>生产者-消费者</strong>，也体现了设计模式中的<strong>观察者模式</strong></p><h2 id="3-三要素"><a href="#3-三要素" class="headerlink" title="3.三要素"></a>3.三要素</h2><ul><li>ApplicationEvent：事件</li><li>ApplicationListener：事件监听者</li><li>ApplicationEventPublisher：事件发布者</li></ul><h3 id="3-1-事件（ApplicationEvent）"><a href="#3-1-事件（ApplicationEvent）" class="headerlink" title="3.1 事件（ApplicationEvent）"></a>3.1 事件（ApplicationEvent）</h3><p><strong>消息类：</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Builder</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Message</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Long messageId<span class="token punctuation">;</span>    <span class="token keyword">private</span> String content<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>事件包含的实体类</p></blockquote><p><strong>事件类：</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Getter</span><span class="token annotation punctuation">@Setter</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageEvent</span> <span class="token keyword">extends</span> <span class="token class-name">ApplicationEvent</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 4181929072911659524L<span class="token punctuation">;</span>    <span class="token keyword">private</span> Message message<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MessageEvent</span><span class="token punctuation">(</span>Message message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>事件类，继承了ApplicationEvent，并且包含了传递实体类Message</p></blockquote><p><strong>MessageEvent的关系类图（Diagram）：</strong></p><p><img src="/medias/loading/orange.square-circle-preloader.svg" data-original="https://cdn.jsdelivr.net/gh/xuyikai1/PictureBedCDN/img/20879827-a2a4be6d39e1d241.png" alt="2.png"></p><p><strong>其中ApplicationEvent的源码：</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Class to be extended by all application events. Abstract as it * doesn't make sense for generic events to be published directly. * * @author Rod Johnson * @author Juergen Hoeller * @see org.springframework.context.ApplicationListener * @see org.springframework.context.event.EventListener */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationEvent</span> <span class="token keyword">extends</span> <span class="token class-name">EventObject</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/** use serialVersionUID from Spring 1.2 for interoperability. */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 7099057708183571937L<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/** System time when the event happened. */</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> timestamp<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Create a new {@code ApplicationEvent}.     * @param source the object on which the event initially occurred or with     * which the event is associated (never {@code null})     */</span>    <span class="token keyword">public</span> <span class="token function">ApplicationEvent</span><span class="token punctuation">(</span>Object source<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>timestamp <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Return the system time in milliseconds when the event occurred.     */</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token function">getTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>timestamp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>可以看出ApplicationEvent有<strong>记录发生event的时间</strong>，并且source的意义就是<strong>当做发布事件的实体类</strong></p></blockquote><h3 id="3-2-事件监听者（ApplicationListener）"><a href="#3-2-事件监听者（ApplicationListener）" class="headerlink" title="3.2 事件监听者（ApplicationListener）"></a>3.2 事件监听者（ApplicationListener）</h3><p><strong>事件监听类：方式一（EventListener注解实现）</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageListener</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@EventListener</span><span class="token punctuation">(</span>value <span class="token operator">=</span> MessageEvent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listen</span><span class="token punctuation">(</span>MessageEvent event<span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"\n██listener1线程:{}"</span><span class="token punctuation">,</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getThreadGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"event:{}"</span><span class="token punctuation">,</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 处理逻辑</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注解实现监听的原理：</strong></p><p>1：查看<code>@EventListener</code>注解的调用链，其中EventListenerMethodProcessor类的processBean方法（1）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 截取的代码</span>Map<span class="token operator">&lt;</span>Method<span class="token punctuation">,</span> EventListener<span class="token operator">></span> annotatedMethods <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>  annotatedMethods <span class="token operator">=</span> MethodIntrospector<span class="token punctuation">.</span><span class="token function">selectMethods</span><span class="token punctuation">(</span>targetType<span class="token punctuation">,</span>      <span class="token punctuation">(</span>MethodIntrospector<span class="token punctuation">.</span>MetadataLookup<span class="token operator">&lt;</span>EventListener<span class="token operator">></span><span class="token punctuation">)</span> method <span class="token operator">-</span><span class="token operator">></span>          AnnotatedElementUtils<span class="token punctuation">.</span><span class="token function">findMergedAnnotation</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> EventListener<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// An unresolvable type in a method signature, probably from a lazy bean - let's ignore it.</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Could not resolve methods for bean with name '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>获取所有被<code>@EventListener</code>注解修饰的Listener</p></blockquote><p>2：EventListenerMethodProcessor类的processBean方法（2）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 截取的代码</span><span class="token comment" spellcheck="true">// Non-empty set of methods</span>ConfigurableApplicationContext context <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">;</span>    Assert<span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span>context <span class="token operator">!=</span> null<span class="token punctuation">,</span> <span class="token string">"No ApplicationContext set"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>EventListenerFactory<span class="token operator">></span> factories <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>eventListenerFactories<span class="token punctuation">;</span>    Assert<span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span>factories <span class="token operator">!=</span> null<span class="token punctuation">,</span> <span class="token string">"EventListenerFactory List not initialized"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Method method <span class="token operator">:</span> annotatedMethods<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>EventListenerFactory factory <span class="token operator">:</span> factories<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>factory<span class="token punctuation">.</span><span class="token function">supportsMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Method methodToUse <span class="token operator">=</span> AopUtils<span class="token punctuation">.</span><span class="token function">selectInvocableMethod</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> context<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ApplicationListener<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> applicationListener <span class="token operator">=</span>                    factory<span class="token punctuation">.</span><span class="token function">createApplicationListener</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> targetType<span class="token punctuation">,</span> methodToUse<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>applicationListener <span class="token keyword">instanceof</span> <span class="token class-name">ApplicationListenerMethodAdapter</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>ApplicationListenerMethodAdapter<span class="token punctuation">)</span> applicationListener<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>evaluator<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            context<span class="token punctuation">.</span><span class="token function">addApplicationListener</span><span class="token punctuation">(</span>applicationListener<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用Listener Factory类生产出所有被<code>@EventListener</code>的类注入进Spring Context</p></blockquote><p><strong>事件监听类：方式二（实现ApplicationListener接口）</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageListener2</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationListener</span><span class="token operator">&lt;</span>MessageEvent<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onApplicationEvent</span><span class="token punctuation">(</span>MessageEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"\n██listener2线程:{}"</span><span class="token punctuation">,</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getThreadGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"event:{}"</span><span class="token punctuation">,</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 处理逻辑</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实现接口来实现监听的原理：</strong></p><p>1：<strong>ApplicationListenerDetector的postProcessAfterInitialization方法</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span>Object bean<span class="token punctuation">,</span> String beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token keyword">instanceof</span> <span class="token class-name">ApplicationListener</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// potentially not detected as a listener by getBeanNamesForType retrieval</span>            Boolean flag <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>singletonNames<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Boolean<span class="token punctuation">.</span>TRUE<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// singleton bean (top-level or inner): register on the fly</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">.</span><span class="token function">addApplicationListener</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ApplicationListener<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> bean<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>Boolean<span class="token punctuation">.</span>FALSE<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isWarnEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>applicationContext<span class="token punctuation">.</span><span class="token function">containsBean</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// inner bean with other scope - can't reliably process events</span>                    logger<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Inner bean '"</span> <span class="token operator">+</span> beanName <span class="token operator">+</span> <span class="token string">"' implements ApplicationListener interface "</span> <span class="token operator">+</span>                            <span class="token string">"but is not reachable for event multicasting by its containing ApplicationContext "</span> <span class="token operator">+</span>                            <span class="token string">"because it does not have singleton scope. Only top-level listener beans are allowed "</span> <span class="token operator">+</span>                            <span class="token string">"to be of non-singleton scope."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>singletonNames<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>判断一个Bean如果是ApplicationListener，则也是使用context.addApplicationListener添加</p></blockquote><p><strong>总结：</strong> 相对于实现ApplicationListener接口来监听事件的方式，<strong>使用注解的方式更加简便</strong>，并且方式二一个监听类只能监听一个事件，方式一则可新增方法来监听多个其他的事件</p><h3 id="3-3-事件发布者（ApplicationEventPublisher）"><a href="#3-3-事件发布者（ApplicationEventPublisher）" class="headerlink" title="3.3 事件发布者（ApplicationEventPublisher）"></a>3.3 事件发布者（ApplicationEventPublisher）</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> ApplicationContext applicationContext<span class="token punctuation">;</span><span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/sendMessage"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"\n██Test线程:{}"</span><span class="token punctuation">,</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getThreadGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Message newMessage <span class="token operator">=</span> Message<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">messageId</span><span class="token punctuation">(</span>20200610111500000L<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token string">"消息内容"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    MessageEvent event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageEvent</span><span class="token punctuation">(</span>newMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 事件发布</span>    applicationContext<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"消息发送成功"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>事件发布原理分析：</strong></p><p><strong>1：查看ApplicationContext类</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ApplicationContext</span> <span class="token keyword">extends</span> <span class="token class-name">EnvironmentCapable</span><span class="token punctuation">,</span> ListableBeanFactory<span class="token punctuation">,</span> HierarchicalBeanFactory<span class="token punctuation">,</span>        MessageSource<span class="token punctuation">,</span> ApplicationEventPublisher<span class="token punctuation">,</span> ResourcePatternResolver <span class="token punctuation">{</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>ApplicationContext实现了ApplicationEventPublisher类的pulish方法，ApplicationContext的抽象类AbstractApplicationContext里阐述了具体的publishEvent方法</p></blockquote><p><strong>2：AbstractApplicationContext类的publishEvent方法</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">publishEvent</span><span class="token punctuation">(</span>Object event<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> ResolvableType eventType<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> <span class="token string">"Event must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Decorate event as an ApplicationEvent if necessary</span>        ApplicationEvent applicationEvent<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token keyword">instanceof</span> <span class="token class-name">ApplicationEvent</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            applicationEvent <span class="token operator">=</span> <span class="token punctuation">(</span>ApplicationEvent<span class="token punctuation">)</span> event<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            applicationEvent <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PayloadApplicationEvent</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>eventType <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                eventType <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>PayloadApplicationEvent<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">)</span> applicationEvent<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResolvableType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Multicast right now if possible - or lazily once the multicaster is initialized</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>earlyApplicationEvents <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>earlyApplicationEvents<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>applicationEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">getApplicationEventMulticaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">multicastEvent</span><span class="token punctuation">(</span>applicationEvent<span class="token punctuation">,</span> eventType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Publish event via parent context as well...</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>parent <span class="token keyword">instanceof</span> <span class="token class-name">AbstractApplicationContext</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token punctuation">(</span><span class="token punctuation">(</span>AbstractApplicationContext<span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>parent<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> eventType<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>parent<span class="token punctuation">.</span><span class="token function">publishEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>getApplicationEventMulticaster().multicastEvent方法可以看出事件是通过<strong>SimpleApplicationEventMulticaster的multicastEvent方法</strong>发布的</p></blockquote><p>3：<strong>SimpleApplicationEventMulticaster的multicastEvent方法</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">multicastEvent</span><span class="token punctuation">(</span><span class="token keyword">final</span> ApplicationEvent event<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> ResolvableType eventType<span class="token punctuation">)</span> <span class="token punctuation">{</span>  ResolvableType type <span class="token operator">=</span> <span class="token punctuation">(</span>eventType <span class="token operator">!=</span> null <span class="token operator">?</span> eventType <span class="token operator">:</span> <span class="token function">resolveDefaultEventType</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  Executor executor <span class="token operator">=</span> <span class="token function">getTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>ApplicationListener<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> listener <span class="token operator">:</span> <span class="token function">getApplicationListeners</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>executor <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">invokeListener</span><span class="token punctuation">(</span>listener<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token function">invokeListener</span><span class="token punctuation">(</span>listener<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>可以看出如果设置了Executor（线程池）的话，则异步执行监听方法，否则执行同步方法<br>所以后续可以用设置Executor的方法实现异步</p></blockquote><h2 id="4-测试"><a href="#4-测试" class="headerlink" title="4.测试"></a>4.测试</h2><p>Postman调用sendMessage接口，成功实现功能</p><p><img src="/medias/loading/orange.square-circle-preloader.svg" data-original="https://cdn.jsdelivr.net/gh/xuyikai1/PictureBedCDN/img/20879827-e85ddccf75088d05.png" alt="3.png"></p><h2 id="5-支持异步"><a href="#5-支持异步" class="headerlink" title="5.支持异步"></a>5.支持异步</h2><h3 id="5-1-设置Executor的方法实现异步（推荐）"><a href="#5-1-设置Executor的方法实现异步（推荐）" class="headerlink" title="5.1 设置Executor的方法实现异步（推荐）"></a>5.1 设置Executor的方法实现异步（推荐）</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EventConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"applicationEventMulticaster"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ApplicationEventMulticaster <span class="token function">simpleApplicationEventMulticaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        SimpleApplicationEventMulticaster eventMulticaster                <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleApplicationEventMulticaster</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        eventMulticaster<span class="token punctuation">.</span><span class="token function">setTaskExecutor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleAsyncTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> eventMulticaster<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-异步注解"><a href="#5-2-异步注解" class="headerlink" title="5.2 异步注解"></a>5.2 异步注解</h3><p><strong>1：主类新增<code>@EnableAsync</code>注解开启异步</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableAsync</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringEventDemoApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>SpringEventDemoApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2：监听类监听方法新增注解<code>@Async</code></strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageListener</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Async</span>    <span class="token annotation punctuation">@EventListener</span><span class="token punctuation">(</span>value <span class="token operator">=</span> MessageEvent<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listen</span><span class="token punctuation">(</span>MessageEvent event<span class="token punctuation">)</span><span class="token punctuation">{</span>        ThreadUtil<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">6000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"\n██listener1线程:{}"</span><span class="token punctuation">,</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getThreadGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"event:{}"</span><span class="token punctuation">,</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这种做法可以实现异步，但是其实有点违背了Spring事件机制的设计初衷，所以推荐第一种做法实现异步</p></blockquote><h2 id="6-Demo代码"><a href="#6-Demo代码" class="headerlink" title="6.Demo代码"></a>6.Demo代码</h2><p><a href="https://github.com/xuyikai1/SpringEventDemo">GitHub - Spring事件发布监听机制实现业务解耦</a></p><blockquote><p>参考链接：<br><a href="https://zhuanlan.zhihu.com/p/101128672">Spring事件监听机制 - 知乎</a><br><a href="https://zhuanlan.zhihu.com/p/145927110">深入浅出Spring/SpringBoot 事件监听机制 - 知乎</a><br><a href="https://blog.csdn.net/fenglllle/article/details/88370998">Spring事件发布监听</a><br><a href="http://zhengw-tech.com/2019/11/30/practical-spring-function/">spring 事件及异步方法使用</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 事件监听 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5分钟搞懂布隆过滤器</title>
      <link href="/posts/bloom-filter.html"/>
      <url>/posts/bloom-filter.html</url>
      
        <content type="html"><![CDATA[<h1 id="布隆过滤器-Bloom-Filter"><a href="#布隆过滤器-Bloom-Filter" class="headerlink" title="布隆过滤器 - Bloom Filter"></a>布隆过滤器 - Bloom Filter</h1><h2 id="0-引言"><a href="#0-引言" class="headerlink" title="0.引言"></a>0.引言</h2><p><img src="/medias/loading/orange.square-circle-preloader.svg" data-original="https://cdn.jsdelivr.net/gh/xuyikai1/PictureBedCDN/img/douyin.jpg" alt="douyin.jpg"></p><p>P：我们平时在刷抖音时，开发人员如何保证 <strong>不会刷到同样的内容</strong> ？</p><ul><li>1：<strong>把算法推荐中的内容根据历史记录做一遍筛选</strong>？在用户量大，用户查看内容多的场景，<strong>性能低</strong></li><li>2：<strong>历史记录全部计入缓存</strong>？资源量大，并且会随着时间逐渐上涨，<strong>服务器耗费up</strong></li><li>3：<strong>布隆过滤器</strong>？专门用于解决去重问题，存在一定误判概率但是在去重的同时能节省90%的空间</li></ul><h2 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景"></a>1.使用场景</h2><ul><li>1：<strong>在数据量很大(5亿以上)的场景下判断某一数据是否存在</strong>。对比hashMap节省了很大的存储空间</li><li>2：<strong>黑名单、邮箱的垃圾邮件过滤</strong>。正常邮件被放入垃圾邮箱，就是布隆过滤器的误判导致</li><li>3：<strong>去重</strong>。例如爬虫时，对已经爬取过的内容去重</li><li>4：<strong>缓存穿透</strong>（非法用户会使用一般数据库里没有的key来进行访问导致请求一直打到数据库，导致数据库崩溃）。布隆过滤器删除key困难（会影响其他key），更建议直接使用redis set（设置过期时间）</li></ul><h2 id="2-什么是布隆过滤器"><a href="#2-什么是布隆过滤器" class="headerlink" title="2.什么是布隆过滤器"></a>2.什么是布隆过滤器</h2><h3 id="2-1数据结构"><a href="#2-1数据结构" class="headerlink" title="2.1数据结构"></a>2.1数据结构</h3><p>布隆过滤器（Bloom Filter）1970年由Bloom的老哥提出</p><p><img src="/medias/loading/orange.square-circle-preloader.svg" data-original="https://cdn.jsdelivr.net/gh/xuyikai1/PictureBedCDN/img/init.jpg" alt="init.jpg"></p><p>它由一个二进制数组来记录数据的相关性,数组中只有1或0</p><blockquote><p>二进制数组的优势：申请一个 100w 个元素的位数组只占用 1000000Bit / 8 = 125000 Byte = 125000/1024 kb ≈ 122kb 的空间。</p></blockquote><p>因为数组为固定长度，在数据量越多而空间越少的情况，判断误差率会变大</p><h3 id="2-2-原理"><a href="#2-2-原理" class="headerlink" title="2.2 原理"></a>2.2 原理</h3><p><img src="/medias/loading/orange.square-circle-preloader.svg" data-original="https://cdn.jsdelivr.net/gh/xuyikai1/PictureBedCDN/img/add.jpg" alt="add.jpg"></p><p><strong>当一个元素加入布隆过滤器时：</strong></p><ol><li>布隆过滤器中的多个哈希函数对元素值进行计算，得到索引值，之后数组长度对该索引值取模算的数组位置</li><li>多个哈希函数有多个计算后的数组位置，置为1，完成add操作</li></ol><p><img src="/medias/loading/orange.square-circle-preloader.svg" data-original="https://cdn.jsdelivr.net/gh/xuyikai1/PictureBedCDN/img/exist.jpg" alt="exist.jpg"></p><p><strong>当判断一个元素是否存在时：</strong></p><ol><li>多个哈希函数对元素值计算出位置后，如果有一个位置值为0，则肯定不存在</li><li>如果多个位置值都为1，则表示极有可能存在（可能其他元素把这几个位置提前置为1了，导致的误判）</li></ol><h3 id="2-3-使用"><a href="#2-3-使用" class="headerlink" title="2.3 使用"></a>2.3 使用</h3><h4 id="1-使用注意点"><a href="#1-使用注意点" class="headerlink" title="1. 使用注意点"></a>1. 使用注意点</h4><ol><li>使用时 不要让实际元素数量远大于初始化数量；</li><li>当实际元素数量超过初始化数量时，应该对布隆过滤器进行 重建，重新分配一个 size 更大的过滤器，再将所有的历史元素批量 add 进行；</li><li>初始化的数量和误判率根据实际业务场景分配</li></ol><h4 id="2-场景"><a href="#2-场景" class="headerlink" title="2. 场景"></a>2. 场景</h4><h5 id="1-单机场景中-Guava-Bloom-Filter"><a href="#1-单机场景中-Guava-Bloom-Filter" class="headerlink" title="1. 单机场景中 - Guava Bloom Filter"></a>1. 单机场景中 - Guava Bloom Filter</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token number">1</span><span class="token punctuation">.</span>依赖<span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>guava<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>guava<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">28.0</span><span class="token operator">-</span>jre<span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span># <span class="token number">2</span><span class="token punctuation">.</span>使用# <span class="token number">2.1</span> 创建布隆过滤器对象BloomFilter<span class="token operator">&lt;</span>Integer<span class="token operator">></span> filter <span class="token operator">=</span> BloomFilter<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>        Funnels<span class="token punctuation">.</span><span class="token function">integerFunnel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token number">1500</span><span class="token punctuation">,</span>        <span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">;</span># <span class="token number">2.2</span> 判断指定元素是否存在System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>filter<span class="token punctuation">.</span><span class="token function">mightContain</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>filter<span class="token punctuation">.</span><span class="token function">mightContain</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span># <span class="token number">2.3</span> 将元素添加进布隆过滤器filter<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>filter<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>filter<span class="token punctuation">.</span><span class="token function">mightContain</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>filter<span class="token punctuation">.</span><span class="token function">mightContain</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-分布式场景中-Redisson-Bloom-Filter"><a href="#2-分布式场景中-Redisson-Bloom-Filter" class="headerlink" title="2. 分布式场景中 - Redisson Bloom Filter"></a>2. 分布式场景中 - Redisson Bloom Filter</h5><pre class="line-numbers language-java"><code class="language-java"># <span class="token number">1</span><span class="token punctuation">.</span>依赖<span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>redisson<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>redisson<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">3.7</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span># <span class="token number">2</span><span class="token punctuation">.</span>获取存储在redis中的布隆过滤器RBloomFilter<span class="token operator">&lt;</span>String<span class="token operator">></span> filter <span class="token operator">=</span> redissonClient<span class="token punctuation">.</span><span class="token function">getBloomFilter</span><span class="token punctuation">(</span><span class="token string">"BloomFilter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span># <span class="token number">3</span><span class="token punctuation">.</span>不存在时初始化<span class="token punctuation">,</span>filter<span class="token punctuation">.</span><span class="token function">tryInit</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">,</span> <span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">20</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    # <span class="token number">4</span><span class="token punctuation">.</span>新增    filter<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>StrUtil<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span># <span class="token number">5</span><span class="token punctuation">.</span>判断是否存在<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">20</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"key:{},是否存在：{}"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>filter<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>StrUtil<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>参考链接：<br>1：<a href="https://github.com/Snailclimb/JavaGuide/blob/master/docs/dataStructures-algorithms/data-structure/bloom-filter.md">JavaGuide - 布隆过滤器</a><br>2：<a href="https://mp.weixin.qq.com/s/wNtpO7TtxnhoiDHuv1grXg">亿级数据过滤和布隆过滤器</a></p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Data Structure </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bloom filter </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
